{
  "timestamp": "20250815_070450",
  "test_configuration": {
    "total_files": 30,
    "test_files": [
      "C:\\Users\\scott\\Documents\\Nancy\\benchmark_codebase_mcp.py",
      "C:\\Users\\scott\\Documents\\Nancy\\comprehensive_benchmark_with_metrics.py",
      "C:\\Users\\scott\\Documents\\Nancy\\comprehensive_enhanced_benchmark.py",
      "C:\\Users\\scott\\Documents\\Nancy\\comprehensive_spreadsheet_test.py",
      "C:\\Users\\scott\\Documents\\Nancy\\demo_codebase_capabilities.py",
      "C:\\Users\\scott\\Documents\\Nancy\\langchain_comparison.py",
      "C:\\Users\\scott\\Documents\\Nancy\\run_benchmark_api.py",
      "C:\\Users\\scott\\Documents\\Nancy\\run_benchmark_docker.py",
      "C:\\Users\\scott\\Documents\\Nancy\\run_comprehensive_comparison.py",
      "C:\\Users\\scott\\Documents\\Nancy\\run_comprehensive_validation_suite.py"
    ]
  },
  "mcp_results": {
    "total_files": 30,
    "successful_analyses": 29,
    "failed_analyses": 1,
    "total_knowledge_packets": 278,
    "analysis_times": [
      0.016869068145751953,
      0.013528823852539062,
      0.025676250457763672,
      0.016611576080322266,
      0.007605791091918945,
      0.005005359649658203,
      0.0,
      0.01624131202697754,
      0.0,
      0.02270197868347168,
      0.0,
      0.015606880187988281,
      0.0,
      0.006509065628051758,
      0.015670299530029297,
      0.0,
      0.017052412033081055,
      0.011446475982666016,
      0.0,
      0.015567302703857422,
      0.007001399993896484,
      0.009567975997924805,
      0.0,
      0.0075109004974365234,
      0.0,
      0.01614856719970703,
      0.0,
      0.015634775161743164,
      0.0
    ],
    "packet_generation_times": [
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0
    ],
    "file_sizes": [
      16341,
      27874,
      43438,
      42032,
      10902,
      10676,
      22784,
      8295,
      21213,
      33510,
      2665,
      4156,
      6800,
      35536,
      19878,
      8326,
      16383,
      27649,
      5798,
      9598,
      9145,
      13100,
      15078,
      6340,
      14850,
      17501,
      3756,
      7739,
      7747
    ],
    "complexity_scores": [
      32,
      40,
      78,
      70,
      31,
      27,
      53,
      22,
      41,
      113,
      8,
      12,
      9,
      67,
      44,
      0,
      34,
      47,
      13,
      23,
      17,
      20,
      5,
      15,
      6,
      38,
      14,
      22,
      31
    ],
    "total_time": 0.26195621490478516,
    "avg_analysis_time": 0.009032972927751213,
    "avg_packet_time": 0.0,
    "files_per_second": 114.52295571954376,
    "packets_per_second": 1061.246056334439
  },
  "monolithic_results": {
    "error": "Monolithic implementation not available"
  },
  "comparison": {
    "status": "mcp_only",
    "notes": "Monolithic implementation not available for comparison"
  },
  "report": "================================================================================\nNancy Codebase MCP Server - Performance Benchmark Report\n================================================================================\n\nTest Configuration:\n  Test files: 30\n  Test directory: Nancy codebase (.py files only)\n\nMCP Server Results:\n  Total time: 0.26 seconds\n  Successful analyses: 29\n  Failed analyses: 1\n  Files per second: 114.52\n  Average analysis time: 9.03ms\n  Knowledge packets generated: 278\n  Packets per second: 1061.25\n  Average packet generation time: 0.00ms\n\nMonolithic Implementation: Not available for comparison\n\nPerformance Comparison:\n  MCP-only benchmark (monolithic not available)\n\nMCP Server Advantages:\n\nCode Quality Analysis:\n  Average complexity score: 32.14\n  Maximum complexity score: 113\n  Files with high complexity (>20): 18\n\nResource Usage:\n  Total characters processed: 469,110\n  Average file size: 16176 characters\n  Processing rate: 1790795 chars/second\n\nConclusions:\n  + MCP Server provides enhanced code intelligence capabilities\n  + Knowledge Packet generation enables Four-Brain integration\n  + Standalone operation allows for horizontal scaling\n  + MCP protocol enables flexible Nancy architecture\n\nRecommendations:\n  1. Deploy MCP Server for production codebase analysis\n  2. Integrate with Nancy Core via MCP host\n  3. Monitor performance in production environment\n  4. Consider tree-sitter installation for full language support\n\n================================================================================"
}